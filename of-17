
    <p-table [value]="cars" editMode="row" dataKey="id">
        <ng-template pTemplate="header">
            <tr>
                <th style="text-align:center;width:70px;">Enable</th>
                <th style="text-align:center">Instrument Name</th>
                <th style="text-align:center">Display Name</th>
                <th style="text-align:center">Curency</th>
                <th style="text-align:center">Select Stock Exchange</th>
                <th style="text-align:center">Stock Exchange For Value Report</th>
                <th style="text-align:center;width:120px;"></th>

            </tr>
        </ng-template>
        <ng-template pTemplate="body" let-rowData let-editing="editing" let-ri="rowIndex">
            <tr [pEditableRow]="rowData">
                <!--<td style="display:none">{{rowData.id}}</td>-->
                
                <td style="text-align:center">
                    <p-checkbox [(ngModel)]="rowData.isenabled" binary="true"></p-checkbox>

                </td>
                <td>{{rowData.instrumentname}}</td>
                <td>
                    <p-cellEditor>
                        <ng-template pTemplate="input">
                            <input pInputText type="text" [(ngModel)]="rowData.insdisplayname" required [ngStyle]="{'width':'100%'}">
                        </ng-template>
                        <ng-template pTemplate="output">
                            {{rowData.insdisplayname}}
                        </ng-template>
                    </p-cellEditor>
                </td>
                <td>
                    <p-cellEditor>
                        <ng-template pTemplate="input">
                            <p-dropdown [options]="curency" [(ngModel)]="rowData.currencyAlias" [ngStyle]="{'width':'100%'}"></p-dropdown>
                        </ng-template>
                        <ng-template pTemplate="output">
                            {{rowData['currencyAlias'].name}}
                        </ng-template>
                    </p-cellEditor>
                </td>
                <td>
                    
                    <p-cellEditor>
                        <ng-template pTemplate="input">
                            <!--<p-multiSelect [options]="stockExch" [(ngModel)]="rowData['sesymbol'].name" [panelStyle]="{minWidth:'12em'}"></p-multiSelect>-->
                            <form [formGroup]="formGroup">
                                <p-multiSelect [options]=lateBindingOptions formControlName="daysOfTheWeek"></p-multiSelect>
                                {{formGroup.get('daysOfTheWeek').value | json}}
                            </form>
                        </ng-template>
                        <ng-template pTemplate="output">
                            {{rowData['sesymbol'].name}}
                        </ng-template>

                    </p-cellEditor>
                </td>
                <td>
                    <p-cellEditor>
                        <ng-template pTemplate="input">
                            <p-dropdown [options]="stockExch" [(ngModel)]="rowData.stockecchangesymbol"></p-dropdown>
                        </ng-template>
                        <ng-template pTemplate="output">
                            {{rowData['stockecchangesymbol'].name}}
                        </ng-template>
                    </p-cellEditor>
                </td>


                <td style="text-align:center">
                    <button *ngIf="!editing" pButton type="button" pInitEditableRow icon="pi pi-pencil" class="ui-button-info" (click)="onRowEditInit(rowData)"></button>
                    <button *ngIf="editing" pButton type="button" pSaveEditableRow icon="pi pi-check" class="ui-button-success" style="margin-right: .5em" (click)="onRowEditSave(rowData)"></button>
                    <button *ngIf="editing" pButton type="button" pCancelEditableRow icon="pi pi-times" class="ui-button-danger" (click)="onRowEditCancel(rowData, ri)"></button>
                </td>
            </tr>
        </ng-template>
    </p-table>
    





//import { Component, OnInit } from '@angular/core';
//import { Car } from '../../domain/Car';
import { SelectItems, SelectItem, SelectIt} from '../../common/api';
//import { CarService } from '../../service/car.service';
//import { MessageService } from '../../service/message.service';
import { Component, Injector, OnInit } from '@angular/core';
import { MatDialog } from '@angular/material';
import { finalize } from 'rxjs/operators';
import { AppComponentBase } from '@shared/app-component-base';
import { appModuleAnimation } from '@shared/animations/routerTransition';
import { FormGroup, FormBuilder } from '@angular/forms';

import {
    PagedListingComponentBase,
    PagedRequestDto
} from '@shared/paged-listing-component-base';
import {
    InstrumentTypeServiceProxy,
    InstrumentTypeDto,
    PagedResultDtoOfInstrumentTypeDto,
    instrumentTypeDto,
    MasterEntityServiceProxy,
    StockExchangeDto,
    ListResultDtoOfStockExchangeDto,
    CurrencyDto,
    ListResultDtoOfCurrencyDto,
    UpdateIntrumentTypeDto
} from '@shared/service-proxies/service-proxies';


interface Curr {
    name: string;
    code: string;
}
//class PagedInstrumentTypeRequestDto extends PagedRequestDto {
//    keyword: string;
//}
@Component({
    selector: 'app-instrument-type',
    templateUrl: './instrument-type.component.html',
    animations: [appModuleAnimation()],
    styleUrls: ['./instrument-type.component.css']

})


export class InstrumentTypeComponent extends AppComponentBase implements OnInit {

    public formGroup: FormGroup;
    public lateBindingOptions: SelectItem[] = [];

    cars: any[] = [];
    cols: any[];
    curency: SelectItem[] = [];
    stockExch: SelectItem[] = [];
    //colorNames = ['Orange', 'Black', 'Gray', 'Blue', 'Orange', 'Yellow'];


    saving = false;
    UpdateIntrument: UpdateIntrumentTypeDto;
    InstrumentTypes: InstrumentTypeDto[] = [];
    stockexchanges: StockExchangeDto[] = [];
    //value: boolean = false;
    stocknames: SelectIt[] = [];
    //selectcurr: SelectCurr[] = [];
    selectedCurr: Curr;
    selectedStocks: any[];
    selectedIns: any[];
    //selectedchkbox: boolean = true;
    instT: instrumentTypeDto[] = [];
    strary: string[] = [];
    straryid: number[];
    brands: SelectItems[] = [];
    selitems: any;
    splitsingSE: string;
    splitary: string[] = [];
    Currencies: CurrencyDto[] = [];
    CurrSymbolArr: string[];
    CurrSymbolNames: SelectItems[] = [];
    curr: string;
    stocksEdit: string;
    nse: string;
    selectedstocksid: number;
    selectedcurrid: number;
    stockstextchanged: string;
    selctedmultiSE: string[] = [];
    selctedmultiSEstr: string;
    daysOfTheWeek;

    //clonedstockexchange: { [stocK_EXCHANGE_SYMBOL: string]: }
    clonedInstrumentType: { [instrumentname: string]: instrumentTypeDto; } = {};
    clonedCars: { [id: number]: InstrumentTypeDto; } = {};
    constructor(
        injector: Injector,
        private _InstrumentTypeService: InstrumentTypeServiceProxy,
        private _MasterEntityService: MasterEntityServiceProxy,
        private _dialog: MatDialog,
        private formBuilder: FormBuilder
    ) {
        super(injector);
    }

    ngOnInit(): void {

       
        this.formGroup = this.formBuilder.group({
            daysOfTheWeek: []
        });
        

        // in the real world this would happen when an async request returns
        // via a promise or observable
        //setTimeout(() => {
        //    this.lateBindingOptions = [
        //        { value: 1, label: 'one' },
        //        { value: 2, label: 'two' },
        //        { value: 3, label: 'three' }
        //    ];
        //}, 1);


        //this.colors = [
        //    { label: 'Orange', value: { id: 0, name: 'Orange' } },
        //    { label: 'Black', value: { id: 1, name: 'Black' } },
        //    { label: 'Gray', value: { id: 2, name: 'Gray' } },
        //    { label: 'Blue', value: { id: 3, name: 'Blue' } },
        //    { label: 'Yellow', value: { id: 4, name: 'Yellow' } }
        //];
        //console.log('products1: ', this.colors);
        this.cols = [
            //{ field: 'isenabled', header: 'Enable' },
            //{ field: 'instrumentname', header: 'Instrument Name' },
            { field: 'insdisplayname', header: 'Display Name' },
            { field: 'currencyAlias', header: 'Curency' },
            { field: 'sesymbol', header: 'Select Stock Exchange' },
            { field: 'stockecchangesymbol', header: 'Stock Exchange For Value Report' },

        ];

        
        this._InstrumentTypeService
            .getAllInstrumentType()
            .subscribe((result: PagedResultDtoOfInstrumentTypeDto) => {
                this.InstrumentTypes = result.items;
                
                this.InstrumentTypes.forEach(el => {
                    let newName = {
                        "instrumentname": el.instrumentname,
                        "insdisplayname": el.insdisplayname,
                        "msEid": el.msEid,
                        "currencySymbol": el.currencySymbol,
                        "currencyAlias": { id: el.curencyid, name: el.currencyAlias },
                        "semvalrpt": el.semvalrpt,
                        "isenabled": el.isenabled,
                        "sesymbol": { id: el.msEid.split(','), name: el.sesymbol.split(',') },
                        "ciMid": el.ciMid,
                        "curencyid": el.curencyid,
                        "stockecchangesymbol": { id: el.semvalrpt, name: el.stockecchangesymbol },
                        "id": el.id

                    };
                    this.cars.push(newName);
                });
            });


        //this.brands = []; 
        //this.selitems = "NSE";
        //this.strary = this.stockexchanges.map((obj: StockExchangeDto) => obj.stocK_EXCHANGE_SYMBOL);
        //console.log('products2: ', this.curency);
        //console.log('products1: ', this.brands);
        //this.stockexchanges.
        //this.brands = [
        //    { label: this., value: this.stockexchanges.stocK_EXCHANGE_SYMBOL },            

        //];
        this.getAllStockExchanges();
        //this.getAllCurrency();
        this.getcurr();
        this.se();
    }
    se() {
        this._MasterEntityService
            .getAllStockExchange()
            .subscribe((result: ListResultDtoOfStockExchangeDto) => {
                this.stockexchanges = result.items;
               
                this.stockexchanges.forEach(el => {
                    let newName = {
                        label: el.stocK_EXCHANGE_SYMBOL,
                        value: el.id                        
                    };
                    this.lateBindingOptions.push(newName);
                });

                //for (let i = 0; i < this.strary.length; i++) {
                //    let newName = {
                //        label: this.strary[i],
                //        value: this.straryid[i]
                //    };
                //    this.stocknames.push(newName);
                //}


                //this.selectedStocks = [];
                //this.stockexchanges.map((item) => this.selectedStocks.push(item.stocK_EXCHANGE_SYMBOL));
                //console.log('sel:', this.selectedStocks);
                //this.strary.length
                //for (var index in this.strary) {
                //    console.log(index);
                //    //this.brands.push({ label: this.strary[index], value: this.strary[index] })
                //}
                //this.brands = [
                //    { label: this.strary[0], value: this.strary[0] },
                //    { label: this.strary[1], value: this.strary[1] }
                //];
                //let selectedCities: string[] = ["NSE", "BSE"]
                console.log('produ: ', this.stocknames);
                //console.log('st: ', this.stockexchanges);
                //console.log('products1: ', this.stocknames)
                //this.brands = [
                //    { label: 'NSE', value: 'NSE' }

                //];

            });

    }
    getAllStockExchanges() {
        this._MasterEntityService
            .getAllStockExchange()
            .subscribe((result: ListResultDtoOfStockExchangeDto) => {
                this.stockexchanges = result.items;
                //this.strary = this.stockexchanges.map((obj: StockExchangeDto) => obj.stocK_EXCHANGE_SYMBOL);
                //this.straryid = this.stockexchanges.map((obj: StockExchangeDto) => obj.id);

                this.stockexchanges.forEach(el => {
                    let newName = {
                        label: el.stocK_EXCHANGE_SYMBOL, value: { id: el.id, name: el.stocK_EXCHANGE_SYMBOL }
                    };
                    this.stockExch.push(newName);
                });

                //this.stockexchanges.forEach(el => {
                //    let newName = {
                //        label: el.stocK_EXCHANGE_SYMBOL,
                //        value: el.stocK_EXCHANGE_SYMBOL,
                //        id: el.id
                //    };
                //    this.stocknames.push(newName);
                //});

                //for (let i = 0; i < this.strary.length; i++) {
                //    let newName = {
                //        label: this.strary[i],
                //        value: this.straryid[i]
                //    };
                //    this.stocknames.push(newName);
                //}


                //this.selectedStocks = [];
                //this.stockexchanges.map((item) => this.selectedStocks.push(item.stocK_EXCHANGE_SYMBOL));
                //console.log('sel:', this.selectedStocks);
                //this.strary.length
                //for (var index in this.strary) {
                //    console.log(index);
                //    //this.brands.push({ label: this.strary[index], value: this.strary[index] })
                //}
                //this.brands = [
                //    { label: this.strary[0], value: this.strary[0] },
                //    { label: this.strary[1], value: this.strary[1] }
                //];
                //let selectedCities: string[] = ["NSE", "BSE"]
                console.log('produ: ', this.stocknames);
                //console.log('st: ', this.stockexchanges);
                //console.log('products1: ', this.stocknames)
                //this.brands = [
                //    { label: 'NSE', value: 'NSE' }

                //];

            });
    }
    //onStocksChange(event) {
    //    //debugger
    //     this.stocknames.forEach(el => {
    //         if (el.value == event.value) {
    //             this.selectedstocksid = el.id;

    //        }

    //    });
    //    //console.log('event :' + this.selectedstocksid);
    //    //console.log(event);
    //}

    //onCurrencyDrpChange(event) {
    //    this.CurrSymbolNames.forEach(el => {
    //        if (el.value == event.value) {
    //            this.selectedcurrid = el.id;
    //        }

    //    });
    //}
    //onmulChange(event) {
    //    debugger
    //    let namesarr = [] = event.value;

    //    for (var i = 0; i < namesarr.length; i++) {
    //        //namesarr[i] = i * 2
    //        //console.log(arr_names[i])
    //        this.stocknames.forEach(el => {
    //            //debugger
    //            if (namesarr[i] == el.value) {
    //                this.selctedmultiSE.push(el.id.toString());
    //            }

    //        });
    //    }

    //    //namesarr.forEach(vl => {

    //    //    this.stocknames.forEach(el => {
    //    //    debugger


    //    //    });

    //    //});
    //    console.log('event :', this.selctedmultiSE);
    //    this.selctedmultiSEstr = this.selctedmultiSE.toString();
    //    //console.log(event.value);
    //}

    getcurr() {
        this._MasterEntityService
            .getAllCurrency()
            .subscribe((result: ListResultDtoOfCurrencyDto) => {
                this.Currencies = result.items;
                this.Currencies.forEach(el => {
                    let newName = {
                        label: el.currencyAlias, value: { id: el.id, name: el.currencyAlias }
                    };
                    this.curency.push(newName);
                });


            });
    }
    //getAllCurrency() {

    //    //this.CurrSymbolArr = [];
    //    //this._MasterEntityService.getAllCurrency().subscribe(
    //    //    e1 => this.CurrSymbolArr.push({
    //    //        label: e1.items.forEach({}), value: currency.items }),
    //    //    error => MessageUtil.addError(this.messageService, 'Error in loading Currencies', error),
    //    //    () => this.getSelectedCurrency()
    //    //);

    //    this._MasterEntityService
    //        .getAllCurrency()
    //        .subscribe((result: ListResultDtoOfCurrencyDto) => {
    //            this.Currencies = result.items;

    //            //this.Currencies.forEach(element => {
    //            //    this.CurrSymbolNames.push({
    //            //        label: element.currencyAlias,
    //            //        value: element.currencyAlias,
    //            //        id: element.id
    //            //    });
    //            //});

    //            this.Currencies.forEach(el => {
    //                let newName = {
    //                    label: el.currencyAlias,
    //                    value: el.currencyAlias,
    //                    id: el.id
    //                };
    //                this.CurrSymbolNames.push(newName);
    //            });
    //            //this.CurrSymbolArr = this.Currencies.map((obj: CurrencyDto) => obj.currencyAlias);
    //            //this.Currencies.map((item) => this.CurrSymbolArr.push(item.currencySymbol));
    //            //for (let i = 0; i < this.CurrSymbolArr.length; i++) {
    //            //    let newName = {
    //            //        label: this.CurrSymbolArr[i],
    //            //        value: this.CurrSymbolArr[i]
    //            //    };
    //            //    this.CurrSymbolNames.push(newName);
    //            //}
    //            //for (let i = 0; i <= this.Currencies.length; i++) {

    //            //    this.CurrSymbolNames.push({
    //            //        label: this.Currencies[i].currencyAlias,
    //            //        value: this.Currencies[i].id
    //            //    });

    //            //}
    //            //this.Currencies.forEach(el => {
    //            //    let newName = {
    //            //        label: el.currencyAlias,
    //            //        value: el.currencyAlias,

    //            //    };
    //            //    this.CurrSymbolNames.push(newName);
    //            //});
    //        });

    //}

    onRowEditInit(instrumenttype: instrumentTypeDto) {
        debugger
        this.strary = instrumenttype['sesymbol'].id;
        this.straryid = this.strary.map(Number);
        this.formGroup.patchValue({
            daysOfTheWeek: this.straryid
        });
        //this.straryid = [1, 2, 4];
        //this.formGroup.patchValue({
            
        //    daysOfTheWeek: instrumenttype['sesymbol'].id
        //});
        ////this.clonedInstrumentType[instrumenttype.sesymbol] = { ...instrumenttype };
        
        ////this.selitems = new Array<any>();
        //this.splitsingSE = instrumenttype.stockecchangesymbol;
        //this.stockExch.forEach(el => {
        //    if (el['value'] == instrumenttype.sesymbol) {
        //        this.splitsingSE = el.value;

        //    }

        //});

        //this.nse = this.splitsingSE;
        //console.log('seo', this.splitsingSE);
        //var splitedst = this.selitems.split(',');
        //console.log('split', this.da);
        //this.splitary = splitedst;
        ////if (instrumenttype.sesymbol != null) {
        ////    this.selctedmultiSE = this.splitary.toString();
        ////}

        //this.curr = instrumenttype.currencyAlias;
        //this.stocksEdit = instrumenttype.insdisplayname;
        ////this.CurrSymbolNames = [];
    }
    onRowEditCancel(instrumenttype: InstrumentTypeDto, index: number) {
        //debugger
        //this.curr = instrumenttype.currencyAlias;
        //this.instT[index] = this.clonedInstrumentType[instrumenttype.id];
        //delete this.clonedInstrumentType[instrumenttype.id];
    }

    //changetext(event) {
    //    debugger
    //    this.stockstextchanged = event.value;
    //}
    onRowEditSave(car: InstrumentTypeDto) {
        debugger
        this.UpdateIntrument = new UpdateIntrumentTypeDto();
        this.UpdateIntrument.msEid = this.daysOfTheWeek;
        this.UpdateIntrument.insdisplayname = car.insdisplayname;
        this.UpdateIntrument.semvalrptid = this.selectedstocksid;
        this.UpdateIntrument.updateD_BY = 'admin';
        this.UpdateIntrument.isenabled = true;
        this.UpdateIntrument.ciMid = car.ciMid;
        this.UpdateIntrument.curencyid = this.selectedcurrid;
        this.UpdateIntrument.id = car.id;
        this.saving = true;
        //console.log('id:', this.splitsingSE);
        if (car.id > 0) {
            debugger
            //this._InstrumentTypeService.UpdateIntrumentType(car);
            this._InstrumentTypeService
                .UpdateIntrumentType(this.UpdateIntrument)
                .pipe(
                    finalize(() => {
                        this.saving = false;
                    })
                )
                .subscribe(() => {
                    this.notify.info(this.l('UpdatedSuccessfully'));

                });
            //this.messageService.add({ severity: 'success', summary: 'Success', detail: 'Car is updated' });
        }
        else {
            //this.messageService.add({ severity: 'error', summary: 'Error', detail: 'Year is required' });
        }

        //this.InstrumentTypes = this.InstrumentTypes.slice();
    }

    //list(
    //    request: PagedInstrumentTypeRequestDto,
    //    pageNumber: number,
    //    finishedCallback: Function
    //): void {

    //    request.keyword = this.keyword;

    //    this._InstrumentTypeService
    //        .getAllInstrumentType()
    //        .pipe(
    //            finalize(() => {
    //                finishedCallback();
    //            })
    //        )
    //        .subscribe((result: PagedResultDtoOfInstrumentTypeDto) => {
    //            this.InstrumentTypes = result.items;
    //            this.showPaging(result, pageNumber);
    //        });
    //}
    //onRowEditInit(instrumenttypeDto: InstrumentTypeDto) {
    //    this.clonedInstrumentTypeDto[instrumenttypeDto.currencyAlias] = { ...instrumenttypeDto };
    //}
    //ngOnInit() {

    //    this._InstrumentTypeService.getAllInstrumentType();
    //}
    //delete(InstrumentType: InstrumentTypeDto): void {
    //    abp.message.confirm(
    //        this.l('RoleDeleteWarningMessage', InstrumentType.instrumentname),
    //        (result: boolean) => {
    //            if (result) {
    //                this._InstrumentTypeService
    //                    .delete(InstrumentType.id)
    //                    .pipe(
    //                        finalize(() => {
    //                            abp.notify.success(this.l('SuccessfullyDeleted'));
    //                            this.refresh();
    //                        })
    //                    )
    //                    .subscribe(() => { });
    //            }
    //        }
    //    );
    //}
}


//export class InstrumentTypeComponent implements OnInit {

//    cars1: Car[];

//    cars2: Car[];

//    brands: SelectItem[];

//    clonedCars: { [s: string]: Car; } = {};

//    constructor(private carService: CarService, private messageService: MessageService) { }

//    ngOnInit() {
//        this.carService.getCarsSmall().then(cars => this.cars1 = cars);
//        this.carService.getCarsSmall().then(cars => this.cars2 = cars);

//        this.brands = [
//            { label: 'Audi', value: 'Audi' },
//            { label: 'BMW', value: 'BMW' },
//            { label: 'Fiat', value: 'Fiat' },
//            { label: 'Ford', value: 'Ford' },
//            { label: 'Honda', value: 'Honda' },
//            { label: 'Jaguar', value: 'Jaguar' },
//            { label: 'Mercedes', value: 'Mercedes' },
//            { label: 'Renault', value: 'Renault' },
//            { label: 'VW', value: 'VW' },
//            { label: 'Volvo', value: 'Volvo' }
//        ];
//    }

//    onRowEditInit(car: Car) {
//        this.clonedCars[car.vin] = { ...car };
//    }

//    onRowEditSave(car: Car) {
//        if (car.year > 0) {
//            delete this.clonedCars[car.vin];
//            this.messageService.add({ severity: 'success', summary: 'Success', detail: 'Car is updated' });
//        }
//        else {
//            this.messageService.add({ severity: 'error', summary: 'Error', detail: 'Year is required' });
//        }
//    }

//    onRowEditCancel(car: Car, index: number) {
//        this.cars2[index] = this.clonedCars[car.vin];
//        delete this.clonedCars[car.vin];
//    }

//}
